// -*- Doc -*-
// vim: set syntax=asciidoc:

//
// Copyright (c) 2005-2010 Gemini Mobile Technologies, Inc.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= Hibari User's Guide *DRAFT - IN PROGRESS*
:Date: 2010/12/31
:Revision: 0.1.1
:Copyright: Copyright (C) 2006-2010 Gemini Mobile Technologies, Inc.  All rights reserved.

<<<
== Introduction
- History
- Why NoSQL?
- Why Hibari?

== Getting Started
=== Installation
- Downloading
- Installing
- Configuring

*TO BE ADDED ... UNDER CONSTRUCTION*

=== Starting a Single Node Cluster

*TO BE ADDED ... UNDER CONSTRUCTION*

=== Starting a Multi Node Cluster

*TO BE ADDED ... UNDER CONSTRUCTION*

=== Admin Server

*TO BE ADDED ... UNDER CONSTRUCTION*

== Data and Storage Model
- Key, Value, Table
- Key Meta Data
- Memory+Disk Storage
- Disk Only Storage

== Replication and Recovery Mechanisms
- Consistent Hashing and Chains
- Chain Replication and Repair
- Recovery Mechanisms

== Client API Model
- Data Insertion
- Data Deletion
- Data Retrieval
- Test-n-Set
- Micro-Transactions

== Client API Implementations
- Native Erlang
- UBF/EBF/JSF over TCP/IP - Erlang
- Thrift over TCP/IP - C++, Java, Erlang, ...
- S3 over HTTP
- JSON-RPC over HTTP

== Configuration
- central.conf File and Parameters
  * static
  * dynamic
- Others

== Operations
- Adding Tables
- Adding/Removing Data Nodes
- Adding/Removing/Modifying Chains
  * Modifying Chain Lengths
  * Data Rebalancing via Chain Migration
- Adding/Removing Client Nodes
- Adding/Removing Admin Nodes
- Scavenger
- Checkpoint
- Monitoring

== Utilities
- cluster_dump
- gh_tool
- Yahoo's Cloud Serving Benchmark (YCSB)
- Basho Bench (BB)

== Applications
- Hello World - Erlang
- Hello World - Java

== Developers

This section describes the basic recipes to build the following items:

- Hibari Release Package
- Hibari Documentation
- Erlang/OTP System

The first step is to download the Git repositories from GitHub.

. Downloading _basic recipe_
  .. Install Repo
+
------
$ curl http://android.git.kernel.org/repo > ~/bin/repo
$ chmod a+x ~/bin/repo
------
+
  .. Create working directory
+
------
$ mkdir working-directory-name
$ cd working-directory-name
$ repo init -u git://github.com/hibari/manifests.git -m hibari-default.xml
------
+
NOTE: Team members having read-write access are recommended to use
"repo init -u git@github.com:hibari/manifests.git -m hibari-default-rw.xml".
+
  .. Download Git repositories
+
------
$ cd working-directory-name
$ repo sync
------
+

The working directory has the following layout structure:

-----
<working-directory-name>
  |- hibari/
    |- .git/
    |- .gitignore
    |- Makefile
    |- lib/                             <1>
      |- <application_name>/
        |- .git/
        |- .gitignore
        |- ebin/
        |- include/
          |- *.hrl
        |- priv/
        |- rebar.config
        |- src/
          |- <application_name>.app.src
          |- *.erl
        |- test/
          |- eunit/
            |- *.erl
          |- eqc/
            |- *.erl
      :
    |- rebar
    |- rebar.config
    |- rel/                             <2>
      |- files/
        |- app.config
        |- erl
        |- hibari
        |- nodetool
        |- vm.args
      |- hibari/
        :
        |- releases/
          |- <release_vsn>/
            :
          :
        :
      |- reltool.config
  |- hibari-doc/                        <3>
    :
  |- manifests/                         <4>
    :
  |- patches/                           <5>
    :
  |- rebar/                             <6>
    :
  |- .repo/
    :
-----

<1> Applications
<2> Releases
<3> Documentation
<4> Manifests
<5> Patches
<6> Rebar

For futher information and help for related tools, please refer to the
following links:

- AsciiDoc - http://www.methods.co.nz/asciidoc/index.html
  * *asciidoc 8.6.3 has been tested most recently*
- Erlang - http://www.erlang.org/
  * *R14B01 has been tested most recently*
  * *R13B04 or newer*
- Git - http://git-scm.com/
  * *Git 1.5.4 or newer*
  * _required for Repo and GitHub_
- GitHub - https://github.com
- OpenSSL - http://www.openssl.org/
  * _required for Erlang_
- Python - http://www.python.org
  * *Python 2.4 or newer (CAUTION: Python 3.x might be too new)*
  * _required for AsciiDoc and Repo_
- Rebar - https://github.com/basho/rebar/wiki
- Repo - http://source.android.com/source/git-repo.html

=== Hibari Release Package

This section is the first step to build, to _eunit_ test, and to
package your own Hibari.

. Building _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make compile
------
+
. EUnit Testing _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make eunit
------
+
. Dialyzer Testing _basic recipe_
  .. Build Dialyzer's PLT _(required once)_
+
------
$ cd working-directory-name/hibari
$ make build-plt
------
+
TIP: Check Makefile and dialyzer's documentation for further
information.
+
  .. Dialyze Hibari without specs
+
------
$ cd working-directory-name/hibari
$ make dialyze
------
+
CAUTION: If you manually run dialyzer with the "-r" option, execute
"make clean compile" first to avoid finding duplicate beam files
underneath rebar's .eunit directory.  Check Makefile for further
information.
+
  .. Dialyze Hibari with specs
+
------
$ cd working-directory-name/hibari
$ make dialyze-spec
------
+
. Release Generating _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make generate
------
+
CAUTION: Due to an incompatibility between Google's repo tool and
Erlang/OTP's reltool, 'svn' and 'rr-cache' broken symlinks underneath
the lib directory must be removed before generating the release.
Check Makefile for futher details.
+
. Release Packaging _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make package VSN="VSN" DIST="DIST"
------
+
NOTE: A release package tarball "hibari_VSN-DIST-ARCH-WORDSIZE.tgz"
and shasum file "hibari_VSN-DIST-ARCH-WORDSIZE-shasum.txt" are written
to working-directory-name.
+
. Release "Smoke Test" _basic recipe (optional)_
  .. Unpack Hibari Release (in temporary directory)
+
------
$ cd working-directory-name/hibari
$ rm -rf tmp
$ mkdir tmp
$ tar -C tmp -xzf ../hibari_VSN-DIST-ARCH-WORDSIZE.tgz
------
+
  .. Start Hibari
+
------
$ cd working-directory-name/hibari
$ ./tmp/hibari/bin/hibari start
------
+
  .. Attach to running Hibari
+
------
$ cd working-directory-name/hibari
$ ./tmp/hibari/bin/hibari attach
Attaching to working-directory-name/hibari/tmp/hibari/erlang.pipe.1 (^D to exit)
(hibari@127.0.0.1)1>
------
+
  .. Start Admin Server
+
------
(hibari@127.0.0.1)1> brick_admin_sup:start_link().
{ok,<0.176.01)
(hibari@127.0.0.1)2>
------
+
  .. Bootstrap "Test" Cluster
+
------
(hibari@127.0.0.1)2> brick_admin:bootstrap_local([], true, $/, 3, 1, 1, []).
ok
(hibari@127.0.0.1)3>
------
+
  .. Detach from running Hibari ... enter ^D
+
------
(hibari@127.0.0.1)3> ^D [Quit]
------
+
  .. Open "Hibari Web Administration" Page
+
------
$ your-favorite-browser http://127.0.0.1:23080/
------
+
 .. Stop Hibari
+
------
$ cd working-directory-name/hibari
$ ./tmp/hibari/bin/hibari stop
ok
------

=== Hibari Documentation

This section is the first step to download and to build your own
Hibari documentation.

. Building Hibari's "Guides" _basic recipe_
+
------
$ cd working-directory-name/hibari-doc/src/hibari
$ make clean -OR- make realclean
$ make
------
+
. Building Hibari's "Website" _basic recipe_
+
------
$ cd working-directory-name/hibari-doc/src/hibari/website
$ make clean -OR- make realclean
$ make
------
+
NOTE: HTML documentation is written in the "./public_html" directory.

Hibari's documentation is authored using AsciiDoc and a few auxillary
tools:

- ImageMagick
- docbook
- graphviz
- mscgen
- xmlto

Hibari's documentation has been generated with asciidoc 8.6.3 and a
manually modified version of the a2x tool.

------
$ diff -u /usr/local/Cellar/asciidoc/8.6.3/bin/a2x{.orig,}
--- /usr/local/Cellar/asciidoc/8.6.3/bin/a2x.orig	2011-01-02 18:09:35.000000000 +0900
+++ /usr/local/Cellar/asciidoc/8.6.3/bin/a2x	2011-01-02 18:11:19.000000000 +0900
@@ -156,7 +156,10 @@
 def shell_copy(src, dst):
     verbose('copying "%s" to "%s"' % (src,dst))
     if not OPTIONS.dry_run:
-        shutil.copy(src, dst)
+        try:
+            shutil.copy(src, dst)
+        except shutil.Error:
+            return

 def shell_rm(path):
     if not os.path.exists(path):
------

=== Erlang/OTP System

This section is the first step to download, to build, and to install
your own Erlang/OTP system.

. Downloading _basic recipe_
  .. Please make sure to have the 'openssl-devel' package installed on
     your system.  OpenSSL is required by Hibari (and before
     configuring and building of your Erlang/OTP system).
  .. Get and install Git
+
  .. Download the source code for your Erlang/OTP system
+
------
$ cd working-directory-name
$ wget http://www.erlang.org/download/otp_src_R14B01.tar.gz
------
+
  .. Untar the source code for your Erlang/OTP system and then apply
     Hibari's Erlang/OTP patches.
+
------
$ cd working-directory-name
$ tar -xzf otp_src_R14B01.tar.gz
$ cd otp_src_R14B01
$ for i in ../patches/otp_src_R14B01*.patch ; do patch -p2 < $i; done
------
+
. Building _basic recipe_
  .. Change to your working directory and configure Erlang/OTP
+
------
$ cd working-directory-name/otp_src_R14B01
$ ./configure --prefix=otp-installing-directory-name
------
+
  .. Build Erlang/OTP
+
------
$ cd working-directory-name/otp_src_R14B01
$ make
------
+
. Installing _basic recipe_
+
------
$ cd working-directory-name/otp_src_R14B01
$ sudo make install
------

CAUTION: Please make sure "otp-installing-directory-name/bin" is added
to your $PATH environment.

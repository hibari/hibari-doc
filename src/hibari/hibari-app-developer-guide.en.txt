// -*- Doc -*-
// vim: set syntax=asciidoc:

//
// Copyright (c) 2005-2011 Gemini Mobile Technologies, Inc.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= Hibari Application Developer's Guide *DRAFT - IN PROGRESS*
:Date: 2011/01/23
:Revision: 0.1.5
:Copyright: Copyright (C) 2006-2011 Gemini Mobile Technologies, Inc.  All rights reserved.

<<<
== Introduction
_Under Construction_

// - _Dave S. to write, drawing from various materials._
// - _Will solicit info and review from Dev and Marketing as needed._

=== Why NoSQL?
_to be added_

=== Why Hibari?
_to be added_

=== How Hibari Works

==== Data Model
_to be added_

==== Partitioning Across Chains
_to be added_

==== Replication Within Chains
_to be added_

==== RAM and Disk Storage
_to be added_

==== Admin Server
_to be added_


== Getting Started
_Under Construction_

// - _KK Dev to provide initial content._
// - _Dave S. to review, edit, and solicit additional info as needed._

=== Requirements

==== System Requirements
_to be added_

==== Required Software

- OpenSSL - http://www.openssl.org/
  * _required for Erlang's crypto module_

=== Downloading Hibari

A Hibari pre-built release has 2 files:

- a tarball package "hibari-X.Y.Z-DIST-ARCH-WORDSIZE.tgz"
- a md5sum file "hibari-X.Y.Z-DIST-ARCH-WORDSIZE-md5sum.txt"

_X.Y.Z_ is the release version, _DIST_ is the release distribution,
_ARCH_ is the release architecture, and _WORDSIZE_ is the release
wordsize.

Hibari pre-built releases are not available for download yet.  See
<<HibariBuildingSource>> for instructions to build Hibari from source
for your target platform.

=== Installing Hibari

==== Single Node

. Create directory for running Hibari
+
------
$ mkdir running-directory-name
------
+
. Untar release files
+
------
$ tar -C running-directory-name -xvf hibari-X.Y.Z-DIST-ARCH-WORDSIZE.tgz
------

==== Multi Node

Cluster is a simple tool for installing, configuring, and
bootstrapping a cluster of Hibari nodes. The cluster tool requires one
installer node and one or more target nodes for the Hibari cluster.
The installer node can be a different node or can be one of the target
nodes.  The cluster tool requires an installing user (that is you) and
it must be different than the user for Hibari on the target nodes.

NOTE: This tool should meet the needs of most users.  However, this
tool's "target node" recipe is currently Linux-centric (e.g. useradd,
userdel, ...).  Patches and contributions for other OS and platforms
are welcome.  For non-Linux deployments, the cluster tool is rather
simple so installation can be done manually by following the tool's
recipe.

Your Hibari installer node must have following tools/environments
ready.  For further information and help for related tools, please
refer to the following links:

- Bash - http://www.gnu.org/software/bash/
- Expect - http://www.nist.gov/el/msid/expect.cfm
- Git - http://git-scm.com/
  * *Git 1.5.4 or newer*
  * _required for GitHub_
- Perl - http://www.perl.org/
- SSH (client) - http://www.openssh.com/

Your Hibari target nodes must have following tools/environments ready.
For further information and help for related tools, please refer to
the following links:

- SSH (server) - http://www.openssh.com/

So far, there are no "known" version requirements for Bash, Expect,
Perl, and SSH.

===== Prerequisites and Assumptions

A. 1 installer node
   * Bash, Expect, Git, Perl, Python, and SSH (client) is installed
     on installer node
   * Your login account ($USER) exists on installer node with ssh
     private/public keys and ssh agent setup to enable password-less
     ssh login
   * /etc/hosts file on installer node contains entries for all
     target nodes
B. 1 or more cluster target nodes (e.g. dev1, dev2, dev3)
   * Your login account ($USER) exists on target nodes
   * Your login account ($USER) is enabled with password-less sudo
     access on target nodes
   * Your login account ($USER) is accessible with password-less ssh
     login on target nodes
   * SSH (server) is installed on target nodes
   * /etc/hosts file on target nodes contains entries for all target
     nodes
   * Network A and Network B is setup and active (see note below)
C. Cluster configuration file. This will show up as hibari.config in
   latter explanation.  You have to manually create it on installer
   node and later provide it's location as an input to the cluster
   tool.
   * Hibari Admin nodes
   * Hibari Brick nodes
   * Hibari Bricks per Chain value (i.e. replication factor)
   * All Hibari nodes (union of Admin and Brick nodes)
   * All Hibari nodes Network A and Network B ip addresses plus
     Network broadcast addresses and Network A tiebreaker address
   * All Heartbeat UDP ports
+
Example configuration file (hibari.config) for a three node cluster
that uses the same physical network for Network A and Network B (see
note below):
+
------
ADMIN_NODES=(dev1 dev2 dev3)
BRICK_NODES=(dev1 dev2 dev3)
BRICKS_PER_CHAIN=2

ALL_NODES=(dev1 dev2 dev3)
ALL_NETA_ADDRS=("10.181.165.230" "10.181.165.231" "10.181.165.232")
ALL_NETB_ADDRS=("10.181.165.230" "10.181.165.231" "10.181.165.232")
ALL_NETA_BCAST="10.181.165.255"
ALL_NETB_BCAST="10.181.165.255"
ALL_NETA_TIEBREAKER="10.181.165.1"

ALL_HEART_UDP_PORT="63099"
ALL_HEART_XMIT_UDP_PORT="63100"
------
+
Example /etc/hosts file entries for above configuration:
+
------
10.181.165.230  dev1.your-domain.com    dev1
10.181.165.231  dev2.your-domain.com    dev2
10.181.165.232  dev3.your-domain.com    dev3
------
+
NOTE: See
http://hibari.github.com/hibari-doc/hibari-sysadmin-guide.en.html#partition-detector
for further information regarding the network partition detector
application, Network A, and Network B.  Additional information for the
application's configuration is embedded in the partition-detector's
OTP application source file
(https://github.com/hibari/partition-detector/raw/master/src/partition_detector.app.src).
+
CAUTION: In a production setting, Network A and Network B should be
physically different networks and network interfaces.  However, the
same network can be used (as in this example) for Network A and
Network B for testing and development purposes.
+
CAUTION: Currently hostname must not contain "-" (minus).  If hostname
contain "-", like dev-1 for example, your Hibari cluster will not
startup. This will be fixed in future release and this sentence will
be deleted at that time. Thanks for your patience.

===== Example how to prepare installing user

Setup your user (i.e. your login - $USER) on all Hibari nodes if not
already existing.  This user will only be used for Hibari installation
purposes.

1. As root user, add your user to all of the Hibari nodes and grant
   sudo access for your user.
+
------
$ useradd $USER
$ passwd $USER
$ visudo
# append the following line and save it
$USER  ALL=(ALL)       NOPASSWD: ALL
------
+
NOTE: If you get "sudo: sorry, you must have a tty to run sudo" error
while testing 'sudo', consider to comment out following line inside of
the /etc/sudoers file:
+
------
$ visudo
Defaults    requiretty
------
+
2. Create a new ssh private/public key for your user on the installer
   node.
+
------
$ ssh-keygen
# enter your password for the private key
$ eval `ssh-agent`
$ ssh-add ~/.ssh/id_rsa
# re-enter your password for the private key
------
+
3. Append an entry for the installer node to your \~/.ssh/known_hosts
   file on each of the Hibari nodes and append an entry to your
   ~/.ssh/authorized_keys file on all of the Hibari nodes for your
   public ssh key.
+
------
$ ssh-copy-id -i ~/.ssh/id_rsa.pub $USER@dev1
$ ssh-copy-id -i ~/.ssh/id_rsa.pub $USER@dev2
$ ssh-copy-id -i ~/.ssh/id_rsa.pub $USER@dev3
------
+
NOTE: If your installer node will be one of the Hibari cluster nodes,
make sure that you ssh-copy-id to the installer node also.
+
4. Confirm password-less access to the each of the Hibari nodes works
as expected.
+
------
$ ssh $USER@dev1
$ ssh $USER@dev2
$ ssh $USER@dev3
------

TIP: If needed, check
http://inside.mines.edu/~gmurray/HowTo/sshNotes.html for further SSH
setup help.

===== Example how to prepare installer node

1. Configure your e-mail and name for Git
+
------
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"
------
+
2. Create working directory
+
------
$ mkdir working-directory-name
------
+
3. Download cluster tool's Git repository
+
------
$ cd working-directory-name
$ git clone git://github.com/hibari/clus.git
------
+
4. Place a copy of the Hibari pre-built release and your hibari.config
   file into the working directory.
+
------
$ cd working-directory-name
$ ls -1
clus
hibari-X.Y.Z-DIST-ARCH-WORDSIZE-md5sum.txt
hibari-X.Y.Z-DIST-ARCH-WORDSIZE.tgz
hibari.config
$
------

===== Example how to create all Hibari nodes

All of the operations below are run on the installer node via two Bash
scripts (i.e. clus.sh and clus-hibari.sh).

1. Create (or re-create) "hibari" user on all Hibari nodes
+
NOTE: If your ssh private key is protected by a password, please make
sure your private key is registered with the ssh agent before
proceeding.
+
------
$ cd working-directory-name
$ for i in dev1 dev2 dev3 ; do ./clus/priv/clus.sh -f init hibari $i ; done
hibari@dev1
hibari@dev2
hibari@dev3
------
+
CAUTION: The -f option will forcefully delete and then re-create
the "hibari" user on the target node.
+
2. Copy pre-built release to all Hibari nodes and then setup Hibari
   package on all Hibari nodes via the "hibari" user.
+
------
$ cd working-directory-name
$ ./clus/priv/clus-hibari.sh -f init hibari hibari.config hibari-X.Y.Z-DIST-ARCH-WORDSIZE.tgz
hibari@dev1
hibari@dev2
hibari@dev3
------

TIP: As described in the next section, the clus-hibari.sh script can
be used for starting and stopping of a Hibari multi node cluster even
after it's creation.

=== Deploying a Simple Hibari System

==== Single Node

===== Basic Configuration
_to be added_

===== Starting a Single Node Cluster

. Start Hibari
+
------
$ running-directory-name/hibari/bin/hibari start
------
+
. Bootstrap Hibari
+
------
$ running-directory-name/hibari/bin/hibari-admin bootstrap
------
+
The Hibari bootstrap process starts Hibari's Admin server on the
single node and creates a single table "tab1" serving as Hibari's
default table.

===== Verifying Your System

A few simple operations to verify system is set up properly.

. Open "Hibari Web Administration" Page
+
------
$ your-favorite-browser http://127.0.0.1:23080
------

_to be added_

===== Creating Other Tables
_to be added_

===== Stopping a Single Node Cluster

. Stop Hibari
+
------
$ running-directory-name/hibari/bin/hibari stop
------

==== Multi Node

===== Basic Configuration
_to be added_

===== Starting a Multi Node Cluster

. Start Hibari on all Hibari nodes via the "hibari" user
+
------
$ cd working-directory-name
$ ./clus/priv/clus-hibari.sh -f start hibari hibari.config
hibari@dev1
hibari@dev2
hibari@dev3
------
+
. Bootstrap Hibari on first Hibari admin node via the "hibari" user
+
------
$ cd working-directory-name
$ ./clus/priv/clus-hibari.sh -f bootstrap hibari hibari.config
hibari@dev1 => hibari@dev1 hibari@dev2 hibari@dev3
------
+
The Hibari bootstrap process starts Hibari's admin server on the first
admin node and creates a single table "tab1" serving as Hibari's
default table.
+
NOTE: If bootstrapping fails due to "another_admin_server_running"
error, please stop the other Hibari cluster(s) running on the network
or repeat the installation from the beginning with udp ports
(i.e. ALL_HEART_UDP_PORT and ALL_HEART_XMIT_UDP_PORT) that are not in
use by other applications or another Hibari cluster.

===== Verifying Your System

A few simple operations to verify system is set up properly.

. Open "Hibari Web Administration" Page
+
------
$ your-favorite-browser http://dev1:23080
------

_to be added_

===== Creating Other Tables
_to be added_

===== Stopping a Multi Node Cluster

. Stop Hibari on all Hibari nodes via the "hibari" user
+
------
$ cd working-directory-name
$ ./clus/priv/clus-hibari.sh -f stop hibari hibari.config
ok
ok
ok
hibari@dev1
hibari@dev2
hibari@dev3
------


== Client API Model
_Under Construction_

// - _Dave to import content from pre-existing "Developer's Guide", review and revise as needed._
// - _Will solicit info and review from Dev as needed._

=== Data Insertion
_to be added_

=== Data Deletion
_to be added_

=== Data Retrieval
_to be added_

=== Test-n-Set
_to be added_

=== Micro-Transactions
_to be added_


== Client API Implementations
_Under Construction_

// - _Dave to import content from pre-existing "Developer's Guide", review and revise as needed._
// - _Will solicit info and review from Dev as needed._

=== Native Erlang
_to be added_

=== UBF/EBF/JSF over TCP/IP
_to be added_

=== Thrift over TCP/IP
_to be added_

=== JSON-RPC over HTTP
_to be added_

=== S3 over HTTP
_to be added_


== Developer Utilities
_Under Construction_

// - _KK Dev to provide initial content._
// - _Dave to review, edit, and solicit additional info as needed._

=== Basho Bench
_to be added_

=== Yahoo! Cloud Serving Benchmark
_to be added_


[[HibariBuildingSource]]
== Building Hibari from Source
_Under Construction_

// - _KK Dev to provide initial content._
// - _Dave to review, edit, and solicit additional info as needed._

This section describes the basic recipes to build the following items:

- Hibari Release Package
- Hibari Documentation
- Erlang/OTP System

Before getting started, review this checklist of tools and software.
Please install and setup as needed.

Git (Mandatory)::
- Git - http://git-scm.com/
  * *Git 1.5.4 or newer, Git 1.7.3.4 has been tested recently*
  * _required for Repo and GitHub_
- GitHub - https://github.com
  * Anonymous read-only access using the GIT protocol is default.
  * Team members having read-write access should add his/her ssh
    public key under your GitHub account.
Erlang/OTP (Mandatory)::
- OpenSSL - http://www.openssl.org/
  * _required for Erlang's crypto module_
- Erlang - http://www.erlang.org/
  * *R13B04 or newer*
  * *R14B01 has been tested most recently*
  * If needed, see <<ErlangOTP>> for instructions to build Erlang/OTP
    from source.
Python (Mandatory)::
- Python - http://www.python.org
  * *Python 2.4 or newer, Python 2.7 has been tested most recently
     (CAUTION: Python 3.x might be too new)*
  * _required for Repo and AsciiDoc_
AsciiDoc (Optional)::
- AsciiDoc - http://www.methods.co.nz/asciidoc/index.html
  * *asciidoc 8.6.1 and asciidoc 9.6.3 have been tested most recently*
  * plus the following tools:
    ** ImageMagick - http://www.imagemagick.org/
    ** graphviz - http://www.graphviz.org/
    ** mscgen - http://www.mcternan.me.uk/mscgen/
  * Mandatory for building Hibari's documentation. See
    <<HibariAsciiDoc>> for further details.
- docbook - http://www.docbook.org/
  * Optional for building _pdf_ version of Hibari's documentation
- xmlto - https://fedorahosted.org/xmlto/
  * Optional for building _text_ version of Hibari's documentation

In addition to the above list, Hibari also depends on two tools to
automate the downloading and the packaging steps.

- Repo - http://source.android.com/source/git-repo.html
- Rebar - https://github.com/basho/rebar/wiki

Instructions for downloading the Repo tool are described next.  The
Rebar tool is included in Hibari's git repositories so there is no
need to download it separately.  Please refer to the above sites for
further information regarding the usage of these tools.

The first step is to download the Git repositories from GitHub.

. Downloading _basic recipe_
  .. Configure your e-mail and name for Git
+
------
$ git config --global user.email "you@example.com"
$ git config --global user.name "Your Name"
------
+
  .. Install Repo
+
------
$ mkdir -p ~/bin
$ wget -O - http://android.git.kernel.org/repo > ~/bin/repo
$ chmod a+x ~/bin/repo
------
+
  .. Create working directory
+
------
$ mkdir working-directory-name
$ cd working-directory-name
$ repo init -u git://github.com/hibari/manifests.git -m hibari-default.xml
------
+
NOTE: Your "Git" identity is needed during the init step.  Please
enter the name and email of your GitHub account if you have one.  Team
members having read-write access are recommended to use "repo init -u
git@github.com:hibari/manifests.git -m hibari-default-rw.xml".
+
  .. Download Git repositories
+
------
$ cd working-directory-name
$ repo sync
------
+

The working directory has the following layout structure:

-----
<working-directory-name>
  |- hibari/
    |- .git/
    |- .gitignore
    |- Makefile
    |- dialyze-ignore-warnings.txt
    |- dialyze-nospec-ignore-warnings.txt
    |- lib/                             <1>
      |- <application_name>/
        |- .git/
        |- .gitignore
        |- ebin/
        |- include/
          |- *.hrl
        |- priv/
        |- rebar.config
        |- src/
          |- <application_name>.app.src
          |- *.erl
        |- test/
          |- eunit/
            |- *.erl
          |- eqc/
            |- *.erl
      :
    |- rebar
    |- rebar.config
    |- rel/                             <2>
      |- files/
        |- app.config
        |- erl
        |- hibari
        |- hibari-admin
        |- nodetool
        |- nodetool-admin
        |- vm.args
      |- hibari/
        :
        |- releases/
          |- <release_vsn>/
            :
          :
        :
      |- reltool.config
  |- hibari-doc/                        <3>
    :
  |- manifests/                         <4>
    :
  |- patches/                           <5>
    :
  |- rebar/                             <6>
    :
  |- .repo/
    :
-----

<1> Applications
<2> Releases
<3> Documentation
<4> Manifests
<5> Patches
<6> Rebar

=== Hibari Release Package

This section is the first step to build, to _eunit_ test, and to
package your own Hibari.

. Building _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make
------
+
TIP: If the response is "make: erl: Command not found", please make
sure Erlang/OTP is installed and "otp-installing-directory-name/bin"
is added to your $PATH environment.
+
. Release Packaging _basic recipe_
+
------
$ cd working-directory-name/hibari
$ make package
------
+
NOTE: A release package tarball "hibari-X.Y.Z-dev-ARCH-WORDSIZE.tgz"
and md5sum file "hibari-X.Y.Z-dev-ARCH-WORDSIZE-md5sum.txt" is written
to working-directory-name.

[[HibariAsciiDoc]]
=== Hibari Documentation

This section is the first step to download and to build your own
Hibari documentation.

. Building Hibari's "Guides" _basic recipe_
+
------
$ cd working-directory-name/hibari-doc/src/hibari
$ make clean -OR- make realclean
$ make
------
+
. Building Hibari's "Website" _basic recipe_
+
------
$ cd working-directory-name/hibari-doc/src/hibari/website
$ make clean -OR- make realclean
$ make
------
+
NOTE: HTML documentation is written in the "./public_html" directory.

Hibari's documentation is authored using AsciiDoc and a few auxillary
tools:

- ImageMagick
- docbook
- graphviz
- mscgen
- xmlto

Hibari's documentation is generated with asciidoc 8.6.3 and a manually
modified version of the a2x tool.

------
$ diff -u /usr/local/Cellar/asciidoc/8.6.3/bin/a2x{.orig,}
--- /usr/local/Cellar/asciidoc/8.6.3/bin/a2x.orig	2011-01-02 18:09:35.000000000 +0900
+++ /usr/local/Cellar/asciidoc/8.6.3/bin/a2x	2011-01-02 18:11:19.000000000 +0900
@@ -156,7 +156,10 @@
 def shell_copy(src, dst):
     verbose('copying "%s" to "%s"' % (src,dst))
     if not OPTIONS.dry_run:
-        shutil.copy(src, dst)
+        try:
+            shutil.copy(src, dst)
+        except shutil.Error:
+            return

 def shell_rm(path):
     if not os.path.exists(path):
------

[[ErlangOTP]]
=== Erlang/OTP System

This section is the first step to download, to build, and to install
your own Erlang/OTP system.

. Downloading _basic recipe_
  .. Please make sure to have the 'openssl-devel' package installed on
     your system.  OpenSSL is required by Hibari (and before
     configuring and building of your Erlang/OTP system).
  .. Get and install Git
+
  .. Download the source code for your Erlang/OTP system
+
------
$ cd working-directory-name
$ wget http://www.erlang.org/download/otp_src_R14B01.tar.gz
------
+
  .. Untar the source code for your Erlang/OTP system.
+
------
$ cd working-directory-name
$ tar -xzf otp_src_R14B01.tar.gz
------
+
. Building _basic recipe_
  .. Change to your working directory and configure Erlang/OTP
+
------
$ cd working-directory-name/otp_src_R14B01
$ ./configure --prefix=otp-installing-directory-name
------
+
  .. Build Erlang/OTP
+
------
$ cd working-directory-name/otp_src_R14B01
$ make
------
+
. Installing _basic recipe_
+
------
$ cd working-directory-name/otp_src_R14B01
$ sudo make install
------

CAUTION: Please make sure "otp-installing-directory-name/bin" is added
to your $PATH environment.


== Sample Application
_Under Construction_

// - _KK Dev to provide initial content._
// - _Likely deferred to future date._
